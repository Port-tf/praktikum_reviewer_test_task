# Лучше конкретизировать импорт через конструкцию from-import, это уменьшит
# количество кода при использовании методов этой библиотеки ниже.
import datetime as dt

# Классно было бы использовать docstring, тогда, если ты отправишь код товарищу,
# ему будет легче понять для чего этот класс.
class Record:
# Параметру date лучше присвоить значение None по умолчанию.
    def __init__(self, amount, comment, date=''):
        self.amount = amount
        self.date = (
            dt.datetime.now().date() if
# Можно избавиться от not, если переставить местами значения для True или False.
# Когда избавимся от not, перенос этого тернарного оператора
# можно будет привести в более читабельный вид.
            not
# Закрывающую скобку при таком переносе кода необходимо перенести на линию первого символа переменной.
            date else dt.datetime.strptime(date, '%d.%m.%Y').date())
        self.comment = comment


# Классно было бы использовать docstring, тогда, если ты отправишь код товарищу,
# ему будет легче понять для чего этот класс.
class Calculator:
    def __init__(self, limit):
        self.limit = limit
        self.records = []

# Из названия метода понятно, что он делает, но было бы классно применить docstring.
    def add_record(self, record):
        self.records.append(record)

# Написать docstring будет отличной идей.
    def get_today_stats(self):
        today_stats = 0
# С большой буквы в Python принято называть классы, все переменные с маленькой.
        for Record in self.records:
            if Record.date == dt.datetime.now().date():
# Если применить составное присваивание "+=", то можно сократить код.
                today_stats = today_stats + Record.amount
        return today_stats

# Добавить описание финкции будет отличной идей.
    def get_week_stats(self):
        week_stats = 0
# Если переписать условие внутри цикла, можно будет избавиться от линей переменной.
        today = dt.datetime.now().date()
        for record in self.records:
# Необходимо переписать условие, привести к виду: (today - record.date).days имеет границы от и до. 
# Тогда можно избавить от лишнего кода и and.
            if (
                (today - record.date).days < 7 and
                (today - record.date).days >= 0
            ):
                week_stats += record.amount
        return week_stats


# Классно было бы использовать docstring, тогда, если ты отправишь код товарищу,
# ему будет легче понять для чего этот класс.
class CaloriesCalculator(Calculator):
# Если написать docstring для функции, то избавимся от комментария.
    def get_calories_remained(self):  # Получает остаток калорий на сегодня
# В данный момент понятно что лежит в переменной x, а если эту переменную использовать
# дальше в коде, то придется вернуться сюда и освежить память. По правилам хорошего тона
# имена переменным принято давать понятные.
        x = self.limit - self.get_today_stats()
        if x > 0:
# Избавляемся от бэкслешей. Для переноса оборачиваем строку в скобки.
# f-строку используем только там, где нам нужно передать в текст переменную. 
            return f'Сегодня можно съесть что-нибудь' \
# Пробел лучше перенести в 69-ю строку.
                   f' ещё, но с общей калорийностью не более {x} кКал'
# Лишний else, если мы попадем в блок if, то там уже есть return, он остановит дальнейшее,
# выполнее кода функции и до этого return программа не доберется.
        else:
# Лишние скобки. Между return и тем что он возвращает ставиться пробел.
            return('Хватит есть!')


# Классно было бы использовать docstring, тогда, если ты отправишь код товарищу,
# ему будет легче понять для чего этот класс.
class CashCalculator(Calculator):
# Так как это константа, и значение мы заводим сами, можно не приводить число к вещественному,
# а просто указать 60.0. Для EURO_RATE тоже самое. 
# Названия констант ясно отражают для чего они, комментарии лишние.
    USD_RATE = float(60)  # Курс доллар США.
    EURO_RATE = float(70)  # Курс Евро.

# Добавить описание финкции будет отличной идей.    
    def get_today_cash_remained(self, currency,
# Параметры USD_RATE, EURO_RATE необходимо убрать, ТЗ не преполагает передачу курса валюты
# при вызове этой функции.
                                USD_RATE=USD_RATE, EURO_RATE=EURO_RATE):
# Лишняя переменная, тут она создается с начальным значением, но так как это начальное 
# значение во все условиях будет перезаписано, шансов использовать, например со значением 'usd', нет.
# Лучше создать словарь, где в качестве ключей будем использовать возможные значения,
# получаемые через параметр currency, а значения названия валюты, используемое в выводе.
        currency_type = currency
        cash_remained = self.limit - self.get_today_stats()
# Если пользователь введет валюту, которая не предусмотренна программой?
# Нужно предусмотреть этот случай.
        if currency == 'usd':
            cash_remained /= USD_RATE
# Если будет словарь, эту строчку можно убрать.
            currency_type = 'USD'
# Выше для условия проверки пришедшей строки использовалась переменная currency,
# здесь тогда логично использовать ее же.
        elif currency_type == 'eur':
            cash_remained /= EURO_RATE
# Если будет словарь, эту строчку можно убрать.
            currency_type = 'Euro'
# Если будет словарь, этот блок elif можно полностью удалить. Выше для условия проверки
# пришедшей строки использовалась переменная currency,
# здесь тогда логично использовать ее же.
        elif currency_type == 'rub':
# Оператор присваивания "=", оператор сравнения "==", в данный момент эта строка просто проверяет равно ли 
# значение cash_remained 1.00. Она никак не влияет на код.
            cash_remained == 1.00
# Если будет словарь, эту строчку можно убрать.
            currency_type = 'руб'
        if cash_remained > 0:
            return (
# В f-строке функции не используем, результат преобразования сохраняем в переменной
# и ее передаем.
                f'На сегодня осталось {round(cash_remained, 2)} '
                f'{currency_type}'
            )
        elif cash_remained == 0:
            return 'Денег нет, держись'
# От этого elif можно избавиться, оставить только return,
# на случай если ни одно из условий выше не сработает. 
        elif cash_remained < 0:
# Можно использовать f-строку. Избавляемся от бекслеша.
            return 'Денег нет, держись:' \
# Если в форматировании строки мы используем ":.2f", то вывод ".. 555 руб"
# не получится, в ТЗ нас просят округлять до сотых, а не выводить до второго
# знака после запятой.
# 
                   ' твой долг - {0:.2f} {1}'.format(-cash_remained,
                                                     currency_type)

# В классе-наследнике методы родителя пишем, если нам нужно
# переопределить или дополнить логику работы этого метода. Тут такой необходимости нет.
    def get_week_stats(self):
        super().get_week_stats()

# Общее для все кода: Можно прописать типизацию для переменных и функций. Не хватает
# блока if __name__ == ‘__main__’.


# Комментарий для проверяющего данное тестовое.

# Если допустимо, чтобы вывод программы выводил значение в виде вещественного числа и
# для рублей, то предложил бы в 95-й другой комментарий:

# Лишняя присваивание, тут создается переменная с начальным значением, но так как оно
# во все условиях будет перезаписано, шансов использовать, например значением 'usd', нет.
# Лучше создать словарь, где в качестве ключей будем использовать возможные значения,
# передаваемые в аргументе при вызове метода, а в значении словаря создавать кортежи,
# В них хранить название валюты и константу. Тогда от условий ниже можно будет избавиться
# вообще, нужно только предусмотреть случай, если придет ключ которого нет в словаре,
# чтобы код не сломался.
# Тогда все вычисления и преобразование фукцией round() можно производить в 100-й строке.
